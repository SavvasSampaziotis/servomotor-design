% This script loads the sim-data generated by the runSim scripts and
% demonstrates the results with appropriate plots.

% 1) Run runPM.m
% 2) Run simulink 
% 3) Run PlotPM.m
% 4) Break-dance

modelName = 'PM_Motor_Motor';
super_title = 'PM Motor: Speed Control';
ONLY_SPEED = true;
targetPer = 50;
Angle_Target = 400;
x = 2; n = 2;



%% Rotor Position and Rotor Speed Response
t = speed_ref1(:,1);
if ONLY_SPEED
    figure(1); clf;
    %  plot(t, Speed_ref(:,2), t,Speed_ref(:,3));
    plotStepResponse(t, speed_ref1(:,2), speed_ref1(:,3));
    title(['Speed Response - Target = ',num2str(targetPer),'% the Nominal'],'Interpreter', 'none');
    xlabel('[sec]'); ylabel('[rpm]');
    suptitle(super_title);
else
    figure(1); clf;
    
    subplot(2,1,1); 
    plot(t, speed_ref1(:,2),t,speed_ref1(:,3));
    title(['Speed Response']);
    ylabel('[rpm]');
   
    subplot(2,1,2); 
    plotStepResponse(t, Rotor_angle1(:,2), Rotor_angle1(:,3));
    title(['Angle Response- Target = ',num2str(Pos_Target)]);
    xlabel('[sec]'); ylabel('[deg]');
    
    suptitle(super_title);
    
    e_ss = Rotor_angle1(end,2)-Rotor_angle1(end,3);
    disp(['Steady State Error = ', num2str(e_ss)]);
end

%% Torque and Torque Current Iq
figure(2); clf;
x = 2; n = 2;
% x = 1; n = 0; For seperate subplots
t = Torque(:,1);
subplot(2,x,1); plot(t, Torque(:,2),Iq_Ref(:,1), Torque_ref);
title('T_e: Electromagnetic Torque');
ylabel('[Nm]');
legend('measured','ref', 'location', 'best');

subplot(2,x,2);
t = Iq(:,1);
plot(t, Iq(:,2), Iq_Ref(:,1),Iq_Ref(:,2));
title('I_q: Stator Torque Current');
ylabel('[A]');


%% Phase Current and Flux Current Id
% figure(3); clf; For seperate subplots
subplot(2,x,n+1);
t = Id(:,1);
plot(t, Id(:,2), t, zeros(size(t)));
title('I_d: Stator Field Current');
ylabel('[A]');
legend('measured','ref', 'location', 'best');
xlabel('[sec]');

subplot(2,x,n+2);
t = Ia_ref(:,1);
plot(t, Ia_ref(:,[2,3]));
title('I_A: Current of Line A');
ylabel('[A]');
xlabel('[sec]');

suptitle(super_title);

